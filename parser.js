/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,14],$V2=[1,19],$V3=[1,30],$V4=[1,31],$V5=[1,32],$V6=[1,33],$V7=[1,34],$V8=[21,25],$V9=[2,16],$Va=[5,104],$Vb=[13,49,58,64,66,67,68,70,71,73],$Vc=[2,48],$Vd=[1,47],$Ve=[1,45],$Vf=[1,65],$Vg=[1,66],$Vh=[1,67],$Vi=[1,68],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,58],$Vo=[1,59],$Vp=[1,61],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,95],$Vu=[1,96],$Vv=[1,84],$Vw=[1,85],$Vx=[1,86],$Vy=[1,87],$Vz=[1,88],$VA=[1,89],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[14,25,37,65,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[1,111],$VQ=[1,121],$VR=[25,97],$VS=[13,14,25,47,58,64,68,71,97],$VT=[14,25,33,35,37,62,65,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97],$VU=[14,25,37,65,69,72,75,76,77,78,79,80,81,82,89,90,91,97],$VV=[14,25,37,65,69,72,75,76,77,80,81,82,89,90,91,97],$VW=[14,25,37,65,69,72,75,76,77,81,89,90,97],$VX=[14,25,37,65,69,72,75,76,77,97],$VY=[14,25,37,65,69,72,75,76,77,89,90,97],$VZ=[13,47,58,64,68,71],$V_=[14,25,97],$V$=[33,35];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"programa":3,"algoritmo":4,"EOF":5,"declaracao_algoritmo":6,"var_decl_block":7,"bloco_declaracao":8,"fun_decl_list_opcional":9,"fun_decl_list":10,"declaracao_funcao":11,"ALGORITMO":12,"IDENTIFICADOR":13,";":14,"VARIAVEIS":15,"var-decl-list":16,"FIM-VARIAVEIS":17,"var_decl":18,"var-dec-list":19,"var-list":20,":":21,"tipo":22,"tipo_matriz":23,"tipo_primitivo":24,",":25,"INTEIRO":26,"REAL":27,"CARACTERE":28,"LITERAL":29,"LOGICO":30,"MATRIZ":31,"lista_dimensoes":32,"DE":33,"tipo_primitivo-plural":34,"[":35,"inteiro_literal":36,"]":37,"NUMERO":38,"BINARIO":39,"HEX":40,"OCT":41,"INTEIROS":42,"REAIS":43,"CARACTERES":44,"LITERAIS":45,"LOGICOS":46,"INICIO":47,"lista_declaracao_opcional":48,"FIM":49,"lista_declaracao":50,"declaracao":51,"declaracao_atribuicao":52,"chamada_funcao":53,"declaracao_retorno":54,"declaracao_se":55,"declaracao_enquanto":56,"declaracao_para":57,"RETORNE":58,"expressao":59,"lvalue":60,"lista_indices":61,"ATRIBUI":62,"expr":63,"SE":64,"ENTAO":65,"FIM-SE":66,"SENAO":67,"ENQUANTO":68,"FACA":69,"FIM-ENQUANTO":70,"PARA":71,"ATE":72,"FIM-PARA":73,"passo_mudanca":74,"PASSO":75,"+":76,"-":77,"OU":78,"E":79,"|":80,"^":81,"&":82,"=":83,"DIFERENTE":84,">":85,"MAIORIGUAL":86,"<":87,"MENORIGUAL":88,"/":89,"*":90,"%":91,"termo":92,"~":93,"NAO":94,"literal":95,"(":96,")":97,"argumentos":98,"STR_CONST":99,"NUMERO_R":100,"C_CONST":101,"VERDADEIRO":102,"FALSO":103,"FUNCAO":104,"lista_parametros_opcional":105,"tipo_opcional":106,"declaracao_var_fun":107,"lista_parametros":108,"parametro":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"ALGORITMO",13:"IDENTIFICADOR",14:";",15:"VARIAVEIS",17:"FIM-VARIAVEIS",19:"var-dec-list",21:":",25:",",26:"INTEIRO",27:"REAL",28:"CARACTERE",29:"LITERAL",30:"LOGICO",31:"MATRIZ",33:"DE",35:"[",37:"]",38:"NUMERO",39:"BINARIO",40:"HEX",41:"OCT",42:"INTEIROS",43:"REAIS",44:"CARACTERES",45:"LITERAIS",46:"LOGICOS",47:"INICIO",49:"FIM",58:"RETORNE",62:"ATRIBUI",63:"expr",64:"SE",65:"ENTAO",66:"FIM-SE",67:"SENAO",68:"ENQUANTO",69:"FACA",70:"FIM-ENQUANTO",71:"PARA",72:"ATE",73:"FIM-PARA",75:"PASSO",76:"+",77:"-",78:"OU",79:"E",80:"|",81:"^",82:"&",83:"=",84:"DIFERENTE",85:">",86:"MAIORIGUAL",87:"<",88:"MENORIGUAL",89:"/",90:"*",91:"%",93:"~",94:"NAO",96:"(",97:")",99:"STR_CONST",100:"NUMERO_R",101:"C_CONST",102:"VERDADEIRO",103:"FALSO",104:"FUNCAO"},
productions_: [0,[3,2],[4,4],[9,1],[9,0],[10,1],[10,2],[6,3],[7,3],[16,2],[16,3],[16,0],[18,4],[22,1],[22,1],[20,3],[20,0],[24,1],[24,1],[24,1],[24,1],[24,1],[23,4],[32,3],[32,4],[36,1],[36,1],[36,1],[36,1],[34,1],[34,1],[34,1],[34,1],[34,1],[8,3],[48,1],[48,0],[50,1],[50,2],[51,1],[51,2],[51,1],[51,1],[51,1],[51,1],[54,2],[54,3],[60,2],[60,1],[61,3],[61,4],[52,4],[55,5],[55,7],[56,5],[57,9],[57,10],[74,2],[74,3],[74,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,2],[59,2],[59,2],[59,2],[59,1],[92,1],[92,1],[92,1],[92,3],[53,4],[53,3],[98,1],[98,3],[95,1],[95,1],[95,1],[95,1],[95,1],[95,1],[11,8],[106,2],[106,0],[105,1],[105,0],[107,2],[107,3],[107,0],[108,1],[108,3],[109,3],[109,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
          return $$[$0-1]; 
break;
case 15:

        console.log(yytext);
    
break;
}
},
table: [{3:1,4:2,6:3,12:[1,4]},{1:[3]},{5:[1,5]},{7:6,15:[1,7]},{13:[1,8]},{1:[2,1]},{8:9,47:$V0},{13:$V1,16:11,17:[2,11],18:12,19:[1,13]},{14:[1,15]},{5:[2,4],9:16,10:17,11:18,104:$V2},{13:$V3,48:20,49:[2,36],50:21,51:22,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,71:$V7},{17:[1,35]},{14:[1,36]},{13:$V1,18:37},o($V8,$V9,{20:38}),{15:[2,7]},{5:[2,2]},{5:[2,3],11:39,104:$V2},o($Va,[2,5]),{13:[1,40]},{49:[1,41]},{13:$V3,49:[2,35],51:42,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,71:$V7},o($Vb,[2,37]),o($Vb,[2,39]),{14:[1,43]},o($Vb,[2,41]),o($Vb,[2,42]),o($Vb,[2,43]),o($Vb,[2,44]),{62:[1,44]},o([14,25,37,62,65,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97],$Vc,{61:46,35:$Vd,96:$Ve}),{13:$V3,14:[1,48],36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:49,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:69,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:70,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:[1,72],60:71},{47:[2,8]},{17:[2,9]},{14:[1,73]},{21:[1,74],25:[1,75]},o($Va,[2,6]),{96:[1,76]},o($Va,[2,34]),o($Vb,[2,38]),o($Vb,[2,40]),{63:[1,77]},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:80,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,97:[1,79],98:78,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o([14,25,33,37,62,65,69,72,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,97],[2,47],{35:[1,81]}),{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:82,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($Vb,[2,45]),{14:[1,83],76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,60:56,92:100,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,60:56,92:101,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,60:56,92:102,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,60:56,92:103,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VJ,[2,80]),o($VJ,[2,81]),o($VJ,[2,82]),o($VJ,[2,83]),{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:104,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VJ,[2,89]),o($VJ,[2,90]),o($VJ,[2,91]),o($VJ,[2,92]),o($VJ,[2,93]),o($VJ,[2,94]),o($VJ,[2,25]),o($VJ,[2,26]),o($VJ,[2,27]),o($VJ,[2,28]),{65:[1,105],76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI},{69:[1,106],76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI},{33:[1,107]},{33:$Vc,35:$Vd,61:46},{17:[2,10]},{22:108,23:109,24:110,26:$VK,27:$VL,28:$VM,29:$VN,30:$VO,31:$VP},{13:[1,117]},{13:$VQ,97:[2,99],105:118,108:119,109:120},{14:[1,122]},{25:[1,124],97:[1,123]},o($VJ,[2,86]),o($VR,[2,87],{76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI}),{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:125,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{37:[1,126],76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI},o($Vb,[2,46]),{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:127,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:128,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:129,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:130,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:131,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:132,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:133,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:134,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:135,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:136,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:137,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:138,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:139,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:140,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:141,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:142,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},o($VJ,[2,76]),o($VJ,[2,77]),o($VJ,[2,78]),o($VJ,[2,79]),{76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI,97:[1,143]},{13:$V3,50:144,51:22,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,71:$V7},{13:$V3,50:145,51:22,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,71:$V7},{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:146,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{14:[2,12]},{14:[2,13]},{14:[2,14]},{32:147,35:[1,148]},o($VS,[2,17]),o($VS,[2,18]),o($VS,[2,19]),o($VS,[2,20]),o($VS,[2,21]),o($V8,[2,15]),{97:[1,149]},{25:[1,150],97:[2,98]},o($VR,[2,103]),{21:[1,151]},o($Vb,[2,51]),o($VJ,[2,85]),{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:152,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{37:[1,153],76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI},o($VT,[2,49]),o($VU,[2,60],{83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF}),o($VU,[2,61],{83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF}),o($VV,[2,62],{78:$Vv,79:$Vw,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF}),o($VW,[2,63],{78:$Vv,79:$Vw,80:$Vx,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,91:$VI}),o($VV,[2,64],{78:$Vv,79:$Vw,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF}),o($VU,[2,65]),o($VU,[2,66]),o($VU,[2,67]),o($VU,[2,68]),o($VU,[2,69]),o($VU,[2,70]),o($VX,[2,71],{78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI}),o($VX,[2,72],{78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI}),o($VY,[2,73],{78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,91:$VI}),o($VY,[2,74],{78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,91:$VI}),o($VW,[2,75],{78:$Vv,79:$Vw,80:$Vx,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,91:$VI}),o($VJ,[2,84]),{13:$V3,51:42,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,66:[1,154],67:[1,155],68:$V6,71:$V7},{13:$V3,51:42,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,70:[1,156],71:$V7},{72:[1,157],76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI},{33:[1,158],35:[1,159]},{36:160,38:$Vf,39:$Vg,40:$Vh,41:$Vi},o($VZ,[2,97],{106:161,21:[1,162]}),{13:$VQ,109:163},{23:165,24:164,26:$VK,27:$VL,28:$VM,29:$VN,30:$VO,31:$VP},o($VR,[2,88],{76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI}),o($VT,[2,50]),o($Vb,[2,52]),{13:$V3,50:166,51:22,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,71:$V7},o($Vb,[2,54]),{13:$V3,36:60,38:$Vf,39:$Vg,40:$Vh,41:$Vi,53:55,59:167,60:56,76:$Vj,77:$Vk,92:54,93:$Vl,94:$Vm,95:57,96:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr,103:$Vs},{34:168,42:[1,169],43:[1,170],44:[1,171],45:[1,172],46:[1,173]},{36:174,38:$Vf,39:$Vg,40:$Vh,41:$Vi},{37:[1,175]},{13:[1,179],18:177,47:[2,102],51:178,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,71:$V7,107:176},{24:180,26:$VK,27:$VL,28:$VM,29:$VN,30:$VO},o($VR,[2,104]),o($VR,[2,105]),o($VR,[2,106]),{13:$V3,51:42,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,66:[1,181],68:$V6,71:$V7},{69:[1,182],74:183,75:[1,184],76:$Vt,77:$Vu,78:$Vv,79:$Vw,80:$Vx,81:$Vy,82:$Vz,83:$VA,84:$VB,85:$VC,86:$VD,87:$VE,88:$VF,89:$VG,90:$VH,91:$VI},o($V_,[2,22]),o($V_,[2,29]),o($V_,[2,30]),o($V_,[2,31]),o($V_,[2,32]),o($V_,[2,33]),{37:[1,185]},o($V$,[2,23]),{8:186,47:$V0},{14:[1,187]},{13:$V1,18:188},o($V8,$V9,{20:38,61:46,35:$Vd,62:$Vc,96:$Ve}),o($VZ,[2,96]),o($Vb,[2,53]),{13:$V3,50:189,51:22,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,71:$V7},{69:[1,190]},{36:191,38:$Vf,39:$Vg,40:$Vh,41:$Vi,76:[1,192],77:[1,193]},o($V$,[2,24]),o($Va,[2,95]),{47:[2,100]},{14:[1,194]},{13:$V3,51:42,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,71:$V7,73:[1,195]},{13:$V3,50:196,51:22,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,71:$V7},{69:[2,57]},{36:197,38:$Vf,39:$Vg,40:$Vh,41:$Vi},{36:198,38:$Vf,39:$Vg,40:$Vh,41:$Vi},{47:[2,101]},o($Vb,[2,55]),{13:$V3,51:42,52:23,53:24,54:25,55:26,56:27,57:28,58:$V4,60:29,64:$V5,68:$V6,71:$V7,73:[1,199]},{69:[2,58]},{69:[2,59]},o($Vb,[2,56])],
defaultActions: {5:[2,1],15:[2,7],16:[2,2],35:[2,8],36:[2,9],73:[2,10],108:[2,12],109:[2,13],110:[2,14],187:[2,100],191:[2,57],194:[2,101],197:[2,58],198:[2,59]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var stringBuffer;

    function output_error(message){
        console.log(message);
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:this.begin("MultiLineComment");
break;
case 2:this.popState();
break;
case 3:;
break;
case 4:;//Deletes most characters
break;
case 5:;
break;
case 6:;//Deletes missing characters if needed
break;
case 7:;// Ignore
break;
case 8:this.begin("SingleLineComment");
break;
case 9:; // Delete
break;
case 10:this.popState();
break;
case 11:this.popState();
break;
case 12:return 12
break;
case 13:return 72
break;
case 14:return 44
break;
case 15:return 28
break;
case 16:return 68
break;
case 17:return 33
break;
case 18:return 65
break;
case 19:return 79
break;
case 20:return 69
break;
case 21:return 103
break;
case 22:return 70
break;
case 23:return 73
break;
case 24:return 17
break;
case 25:return 66
break;
case 26:return 49
break;
case 27:return 104
break;
case 28:return 47
break;
case 29:return 42
break;
case 30:return 26
break;
case 31:return 45
break;
case 32:return 29
break;
case 33:return 46
break;
case 34:return 30
break;
case 35:return 31
break;
case 36:return 94
break;
case 37:return 78
break;
case 38:return 71
break;
case 39:return 75
break;
case 40:return 27
break;
case 41:return 43
break;
case 42:return 58
break;
case 43:return 67
break;
case 44:return 64
break;
case 45:return 15
break;
case 46:return 102
break;
case 47:
                            output_error("BINARIO " + yy_.yytext + "\n");
                            return 39;
                        
break;
case 48:
                            output_error("OCTAL " + yy_.yytext + "\n");
                            return 41;
                        
break;
case 49:
                            output_error("HEXADECIMAL " + yy_.yytext + "\n");
                            return 40;
                        
break;
case 50:
                            output_error("REAL "+ yy_.yytext + "\n");
                            return 100;
                        
break;
case 51:
                            output_error("DECIMAL " + yy_.yytext + "\n");
                            return 38;
                        
break;
case 52:return 13
break;
case 53:return 90
break;
case 54:return 89
break;
case 55:return 77
break;
case 56:return 76
break;
case 57:return 81
break;
case 58:return '!'
break;
case 59:return 91
break;
case 60:return 96
break;
case 61:return 97
break;
case 62:return 'PI'
break;
case 63:return 5
break;
case 64:
                            stringBuffer = "";
                            this.begin("quotes");
                        
break;
case 65:                        
                            this.popState();
                            return 99;
                        
break;
case 66:stringBuffer+=yy_.yytext;
break;
case 67:stringBuffer+=yy_.yytext.substring(1);
break;
case 68:stringBuffer+="\n";
break;
case 69:stringBuffer+="\b";
break;
case 70:stringBuffer+="\t";
break;
case 71:stringBuffer+="\n";
break;
case 72:stringBuffer+="\f";
break;
case 73:stringBuffer+="0";
break;
case 74:;
break;
case 75:
                            output_error("Unterminated string constant");
                            this.popState();
                        
break;
case 76:
                            output_error("String contains null character");
                            this.popState();
                        
break;
case 77:
                            output_error("EOF in string constant");
                            this.popState();
                        
break;
case 78:stringBuffer ="\n"; return C_CONST; 
break;
case 79:stringBuffer = "\b"; return C_CONST; 
break;
case 80:stringBuffer = "\t"; return C_CONST; 
break;
case 81:stringBuffer = "\n"; return C_CONST; 
break;
case 82:stringBuffer = "\f"; return C_CONST; 
break;
case 83:stringBuffer = yy_.yytext.slice(1,-1); return C_CONST;
break;
case 84:stringBuffer = ""; return C_CONST;
break;
case 85:return 62
break;
case 86:return 88
break;
case 87:return 86
break;
case 88:return 84
break;
case 89:
                            return yy_.yytext;
                        
break;
case 90:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*)/,/^(?:\*+\/)/,/^(?:[^\n\*]*)/,/^(?:\*+[^\n\/])/,/^(?:\n)/,/^(?:[^\n])/,/^(?:$)/,/^(?:\/\/)/,/^(?:[^\n])/,/^(?:\n)/,/^(?:$)/,/^(?:([aA])([lL])([gG])([oO])([rR])([iI])([tT])([mM])([oO]))/,/^(?:([aA])([tT])([eEéÉ]))/,/^(?:([cC])([aA])([rR])([aA])([cC])([tT])([eE])([rR])([eE])([sS]))/,/^(?:([cC])([aA])([rR])([aA])([cC])([tT])([eE])([rR])([eE]))/,/^(?:([eE])([nN])([qQ])([uU])([aA])([nN])([tT])([oO]))/,/^(?:([dD])([eE]))/,/^(?:([eE])([nN])([tT])([aA])([oO]))/,/^(?:([eE])|&&)/,/^(?:([fF])([aA])([cC])([aA]))/,/^(?:([fF])([aA])([lL])([sS])([oO]))/,/^(?:([fF])([iI])([mM])-([eE])([nN])([qQ])([uU])([aA])([nN])([tT])([oO]))/,/^(?:([fF])([iI])([mM])-([pP])([aA])([rR])([aA]))/,/^(?:([fF])([iI])([mM])-([vV])([aA])([rR])([iI])([aAáÁãÃ])([vV])([eE])([iI])([sS]))/,/^(?:([fF])([iI])([mM])-([sS])([eE]))/,/^(?:([fF])([iI])([mM]))/,/^(?:([fF])([uU])([nN])([cCçÇ])([aAáÁãÃ])([oO]))/,/^(?:([iI])([nN])([iIíÍ])([cC])([iI])([oO]))/,/^(?:([iI])([nN])([tT])([eE])([iI])([rR])([oO])([sS]))/,/^(?:([iI])([nN])([tT])([eE])([iI])([rR])([oO]))/,/^(?:([lL])([iI])([tT])([eE])([rR])([aA])([iI])([sS]))/,/^(?:([lL])([iI])([tT])([eE])([rR])([aA])([lL]))/,/^(?:([lL])([oOóÓ])([gG])([iI])([cC])([oO])([sS]))/,/^(?:([lL])([oOóÓ])([gG])([iI])([cC])([oO]))/,/^(?:([mM])([aA])([tT])([rR])([iI])([zZ]))/,/^(?:([nN])([aAáÁãÃ])([oO]))/,/^(?:([oO])([uU])|\|\|)/,/^(?:([pP])([aA])([rR])([aA]))/,/^(?:([pP])([aA])([sS])([sS])([oO]))/,/^(?:([rR])([eE])([aA])([lL]))/,/^(?:([rR])([eE])([aA])([iI])([sS]))/,/^(?:([rR])([eE])([tT])([oO])([rR])([nN])([eE]))/,/^(?:([sS])([eE])([nN])([aAáÁãÃ])([oO]))/,/^(?:([sS])([eE]))/,/^(?:([vV])([aA])([rR])([iI])([aAáÁãÃ])([vV])([eE])([iI])([sS]))/,/^(?:([vV])([eE])([rR])([dD])([aA])([dD])([eE])([iI])([rR])([oO]))/,/^(?:(0[bB][01]+))/,/^(?:(0[cC][0-8]+))/,/^(?:(0[xX][0-9a-fA-F]+))/,/^(?:([0-9]+\.[0-9]+))/,/^(?:([0-9]+))/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:$)/,/^(?:")/,/^(?:")/,/^(?:[^\\\n\0\"]+)/,/^(?:\\[^btnf0\0\n])/,/^(?:\\\n)/,/^(?:\\b)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\f)/,/^(?:\\0)/,/^(?:\\)/,/^(?:\n)/,/^(?:[\0]|\0$)/,/^(?:$)/,/^(?:(['])\\n([']))/,/^(?:(['])\\b([']))/,/^(?:(['])\\t([']))/,/^(?:(['])\\n([']))/,/^(?:(['])\\f([']))/,/^(?:(['])[^\n]([']))/,/^(?:(['])([']))/,/^(?::=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:(\+|-|\*|\/|;|,|<|:|@|\(|\)|~|\{|\}|=|\.|\||\^))/,/^(?:.)/],
conditions: {"MultiLineComment":{"rules":[2,3,4,5,6,7],"inclusive":false},"SingleLineComment":{"rules":[9,10,11],"inclusive":false},"quotes":{"rules":[65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}