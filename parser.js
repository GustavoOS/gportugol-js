/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[13,17],$V2=[1,16],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,34],$V9=[5,103],$Va=[13,48,57,63,65,66,67,69,70,72],$Vb=[2,48],$Vc=[1,43],$Vd=[1,41],$Ve=[1,61],$Vf=[1,62],$Vg=[1,63],$Vh=[1,64],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[1,49],$Vm=[1,54],$Vn=[1,55],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,69],$Vt=[1,71],$Vu=[1,91],$Vv=[1,92],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[1,86],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,93],$VI=[1,94],$VJ=[1,95],$VK=[14,24,36,64,68,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96],$VL=[1,108],$VM=[1,109],$VN=[1,110],$VO=[1,111],$VP=[1,112],$VQ=[1,107],$VR=[1,119],$VS=[24,96],$VT=[13,14,24,46,57,63,67,70,96],$VU=[19,24],$VV=[14,24,32,34,36,61,64,68,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96],$VW=[14,24,36,64,68,71,74,75,76,77,78,79,80,81,88,89,90,96],$VX=[14,24,36,64,68,71,74,75,76,79,80,81,88,89,90,96],$VY=[14,24,36,64,68,71,74,75,76,80,88,89,96],$VZ=[14,24,36,64,68,71,74,75,76,96],$V_=[14,24,36,64,68,71,74,75,76,88,89,96],$V$=[13,14,17],$V01=[13,46,57,63,67,70],$V11=[14,24,96],$V21=[32,34];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"programa":3,"algoritmo":4,"EOF":5,"declaracao_algoritmo":6,"var_decl_block":7,"bloco_declaracao":8,"fun_decl_list_opcional":9,"fun_decl_list":10,"declaracao_funcao":11,"ALGORITMO":12,"IDENTIFICADOR":13,";":14,"VARIAVEIS":15,"var-decl-list":16,"FIM-VARIAVEIS":17,"var_decl":18,":":19,"tipo_singular":20,"var-list":21,"tipo_matriz":22,"tipo_primitivo":23,",":24,"INTEIRO":25,"REAL":26,"CARACTERE":27,"LITERAL":28,"LOGICO":29,"MATRIZ":30,"lista_dimensoes":31,"DE":32,"tipo_primitivo-plural":33,"[":34,"inteiro_literal":35,"]":36,"NUMERO":37,"BINARIO":38,"HEX":39,"OCT":40,"INTEIROS":41,"REAIS":42,"CARACTERES":43,"LITERAIS":44,"LOGICOS":45,"INICIO":46,"lista_declaracao_opcional":47,"FIM":48,"lista_declaracao":49,"declaracao":50,"declaracao_atribuicao":51,"chamada_funcao":52,"declaracao_retorno":53,"declaracao_se":54,"declaracao_enquanto":55,"declaracao_para":56,"RETORNE":57,"expressao":58,"lvalue":59,"lista_indices":60,"ATRIBUI":61,"expr":62,"SE":63,"ENTAO":64,"FIM-SE":65,"SENAO":66,"ENQUANTO":67,"FACA":68,"FIM-ENQUANTO":69,"PARA":70,"ATE":71,"FIM-PARA":72,"passo_mudanca":73,"PASSO":74,"+":75,"-":76,"OU":77,"E":78,"|":79,"^":80,"&":81,"=":82,"DIFERENTE":83,">":84,"MAIORIGUAL":85,"<":86,"MENORIGUAL":87,"/":88,"*":89,"%":90,"termo":91,"~":92,"NAO":93,"literal":94,"(":95,")":96,"argumentos":97,"STR_CONST":98,"NUMERO_R":99,"C_CONST":100,"VERDADEIRO":101,"FALSO":102,"FUNCAO":103,"lista_parametros_opcional":104,"tipo_opcional":105,"declaracao_var_fun":106,"lista_parametros":107,"parametro":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"ALGORITMO",13:"IDENTIFICADOR",14:";",15:"VARIAVEIS",17:"FIM-VARIAVEIS",19:":",24:",",25:"INTEIRO",26:"REAL",27:"CARACTERE",28:"LITERAL",29:"LOGICO",30:"MATRIZ",32:"DE",34:"[",36:"]",37:"NUMERO",38:"BINARIO",39:"HEX",40:"OCT",41:"INTEIROS",42:"REAIS",43:"CARACTERES",44:"LITERAIS",45:"LOGICOS",46:"INICIO",48:"FIM",57:"RETORNE",61:"ATRIBUI",62:"expr",63:"SE",64:"ENTAO",65:"FIM-SE",66:"SENAO",67:"ENQUANTO",68:"FACA",69:"FIM-ENQUANTO",70:"PARA",71:"ATE",72:"FIM-PARA",74:"PASSO",75:"+",76:"-",77:"OU",78:"E",79:"|",80:"^",81:"&",82:"=",83:"DIFERENTE",84:">",85:"MAIORIGUAL",86:"<",87:"MENORIGUAL",88:"/",89:"*",90:"%",92:"~",93:"NAO",95:"(",96:")",98:"STR_CONST",99:"NUMERO_R",100:"C_CONST",101:"VERDADEIRO",102:"FALSO",103:"FUNCAO"},
productions_: [0,[3,2],[4,4],[9,1],[9,0],[10,1],[10,2],[6,3],[7,3],[16,2],[16,0],[18,4],[18,5],[20,1],[20,1],[21,2],[21,3],[23,1],[23,1],[23,1],[23,1],[23,1],[22,4],[31,3],[31,4],[35,1],[35,1],[35,1],[35,1],[33,1],[33,1],[33,1],[33,1],[33,1],[8,3],[47,1],[47,0],[49,1],[49,2],[50,1],[50,2],[50,1],[50,1],[50,1],[50,1],[53,2],[53,3],[59,2],[59,1],[60,3],[60,4],[51,4],[54,5],[54,7],[55,5],[56,9],[56,10],[73,2],[73,3],[73,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,2],[58,2],[58,2],[58,2],[58,1],[91,1],[91,1],[91,1],[91,3],[52,4],[52,3],[97,1],[97,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[11,8],[105,2],[105,0],[104,1],[104,0],[106,2],[106,3],[106,0],[107,1],[107,3],[108,3],[108,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
          return $$[$0-1]; 
break;
case 16:

        console.log("VAR-LIST " + yytext);
    
break;
}
},
table: [{3:1,4:2,6:3,12:[1,4]},{1:[3]},{5:[1,5]},{7:6,15:[1,7]},{13:[1,8]},{1:[2,1]},{8:9,46:$V0},o($V1,[2,10],{16:11}),{14:[1,12]},{5:[2,4],9:13,10:14,11:15,103:$V2},{13:$V3,47:17,48:[2,36],49:18,50:19,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,70:$V7},{13:$V8,17:[1,32],18:33},{15:[2,7]},{5:[2,2]},{5:[2,3],11:35,103:$V2},o($V9,[2,5]),{13:[1,36]},{48:[1,37]},{13:$V3,48:[2,35],50:38,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,70:$V7},o($Va,[2,37]),o($Va,[2,39]),{14:[1,39]},o($Va,[2,41]),o($Va,[2,42]),o($Va,[2,43]),o($Va,[2,44]),{61:[1,40]},o([14,24,36,61,64,68,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96],$Vb,{60:42,34:$Vc,95:$Vd}),{13:$V3,14:[1,44],35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:45,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:65,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:66,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:[1,68],59:67},{46:[2,8]},o($V1,[2,9]),{19:$Vs,21:70,24:$Vt},o($V9,[2,6]),{95:[1,72]},o($V9,[2,34]),o($Va,[2,38]),o($Va,[2,40]),{62:[1,73]},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:76,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,96:[1,75],97:74,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o([14,24,32,36,61,64,68,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96],[2,47],{34:[1,77]}),{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:78,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($Va,[2,45]),{14:[1,79],75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,59:52,91:96,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,59:52,91:97,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,59:52,91:98,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,59:52,91:99,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($VK,[2,80]),o($VK,[2,81]),o($VK,[2,82]),o($VK,[2,83]),{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:100,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($VK,[2,89]),o($VK,[2,90]),o($VK,[2,91]),o($VK,[2,92]),o($VK,[2,93]),o($VK,[2,94]),o($VK,[2,25]),o($VK,[2,26]),o($VK,[2,27]),o($VK,[2,28]),{64:[1,101],75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ},{68:[1,102],75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ},{32:[1,103]},{32:$Vb,34:$Vc,60:42},{20:104,22:105,23:106,25:$VL,26:$VM,27:$VN,28:$VO,29:$VP,30:$VQ},{19:[1,113],24:[1,114]},{13:[1,115]},{13:$VR,96:[2,99],104:116,107:117,108:118},{14:[1,120]},{24:[1,122],96:[1,121]},o($VK,[2,86]),o($VS,[2,87],{75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:123,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{36:[1,124],75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ},o($Va,[2,46]),{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:125,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:126,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:127,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:128,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:129,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:130,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:131,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:132,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:133,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:134,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:135,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:136,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:137,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:138,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:139,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:140,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},o($VK,[2,76]),o($VK,[2,77]),o($VK,[2,78]),o($VK,[2,79]),{75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ,96:[1,141]},{13:$V3,49:142,50:19,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,70:$V7},{13:$V3,49:143,50:19,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,70:$V7},{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:144,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{14:[1,145]},{14:[2,13]},{14:[2,14]},{31:146,34:[1,147]},o($VT,[2,17]),o($VT,[2,18]),o($VT,[2,19]),o($VT,[2,20]),o($VT,[2,21]),{20:148,22:105,23:106,25:$VL,26:$VM,27:$VN,28:$VO,29:$VP,30:$VQ},{13:[1,149]},o($VU,[2,15]),{96:[1,150]},{24:[1,151],96:[2,98]},o($VS,[2,103]),{19:[1,152]},o($Va,[2,51]),o($VK,[2,85]),{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:153,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{36:[1,154],75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ},o($VV,[2,49]),o($VW,[2,60],{82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG}),o($VW,[2,61],{82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG}),o($VX,[2,62],{77:$Vw,78:$Vx,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG}),o($VY,[2,63],{77:$Vw,78:$Vx,79:$Vy,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,90:$VJ}),o($VX,[2,64],{77:$Vw,78:$Vx,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG}),o($VW,[2,65]),o($VW,[2,66]),o($VW,[2,67]),o($VW,[2,68]),o($VW,[2,69]),o($VW,[2,70]),o($VZ,[2,71],{77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),o($VZ,[2,72],{77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),o($V_,[2,73],{77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,90:$VJ}),o($V_,[2,74],{77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,90:$VJ}),o($VY,[2,75],{77:$Vw,78:$Vx,79:$Vy,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,90:$VJ}),o($VK,[2,84]),{13:$V3,50:38,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,65:[1,155],66:[1,156],67:$V6,70:$V7},{13:$V3,50:38,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,69:[1,157],70:$V7},{71:[1,158],75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ},o($V$,[2,11]),{32:[1,159],34:[1,160]},{35:161,37:$Ve,38:$Vf,39:$Vg,40:$Vh},{14:[1,162]},o($VU,[2,16]),o($V01,[2,97],{105:163,19:[1,164]}),{13:$VR,108:165},{22:167,23:166,25:$VL,26:$VM,27:$VN,28:$VO,29:$VP,30:$VQ},o($VS,[2,88],{75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ}),o($VV,[2,50]),o($Va,[2,52]),{13:$V3,49:168,50:19,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,70:$V7},o($Va,[2,54]),{13:$V3,35:56,37:$Ve,38:$Vf,39:$Vg,40:$Vh,52:51,58:169,59:52,75:$Vi,76:$Vj,91:50,92:$Vk,93:$Vl,94:53,95:$Vm,98:$Vn,99:$Vo,100:$Vp,101:$Vq,102:$Vr},{33:170,41:[1,171],42:[1,172],43:[1,173],44:[1,174],45:[1,175]},{35:176,37:$Ve,38:$Vf,39:$Vg,40:$Vh},{36:[1,177]},o($V$,[2,12]),{13:[1,181],18:179,46:[2,102],50:180,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,70:$V7,106:178},{23:182,25:$VL,26:$VM,27:$VN,28:$VO,29:$VP},o($VS,[2,104]),o($VS,[2,105]),o($VS,[2,106]),{13:$V3,50:38,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,65:[1,183],67:$V6,70:$V7},{68:[1,184],73:185,74:[1,186],75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,82:$VB,83:$VC,84:$VD,85:$VE,86:$VF,87:$VG,88:$VH,89:$VI,90:$VJ},o($V11,[2,22]),o($V11,[2,29]),o($V11,[2,30]),o($V11,[2,31]),o($V11,[2,32]),o($V11,[2,33]),{36:[1,187]},o($V21,[2,23]),{8:188,46:$V0},{14:[1,189]},{13:$V8,18:190},{19:$Vs,21:70,24:$Vt,34:$Vc,60:42,61:$Vb,95:$Vd},o($V01,[2,96]),o($Va,[2,53]),{13:$V3,49:191,50:19,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,70:$V7},{68:[1,192]},{35:193,37:$Ve,38:$Vf,39:$Vg,40:$Vh,75:[1,194],76:[1,195]},o($V21,[2,24]),o($V9,[2,95]),{46:[2,100]},{14:[1,196]},{13:$V3,50:38,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,70:$V7,72:[1,197]},{13:$V3,49:198,50:19,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,70:$V7},{68:[2,57]},{35:199,37:$Ve,38:$Vf,39:$Vg,40:$Vh},{35:200,37:$Ve,38:$Vf,39:$Vg,40:$Vh},{46:[2,101]},o($Va,[2,55]),{13:$V3,50:38,51:20,52:21,53:22,54:23,55:24,56:25,57:$V4,59:26,63:$V5,67:$V6,70:$V7,72:[1,201]},{68:[2,58]},{68:[2,59]},o($Va,[2,56])],
defaultActions: {5:[2,1],12:[2,7],13:[2,2],32:[2,8],105:[2,13],106:[2,14],189:[2,100],193:[2,57],196:[2,101],199:[2,58],200:[2,59]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var stringBuffer;

    function output_error(message){
        console.log(message);
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:this.begin("MultiLineComment");
break;
case 2:this.popState();
break;
case 3:;
break;
case 4:;//Deletes most characters
break;
case 5:;
break;
case 6:;//Deletes missing characters if needed
break;
case 7:;// Ignore
break;
case 8:this.begin("SingleLineComment");
break;
case 9:; // Delete
break;
case 10:this.popState();
break;
case 11:this.popState();
break;
case 12:return 12
break;
case 13:return 71
break;
case 14:return 43
break;
case 15:return 27
break;
case 16:return 67
break;
case 17:return 32
break;
case 18:return 64
break;
case 19:return 78
break;
case 20:return 68
break;
case 21:return 102
break;
case 22:return 69
break;
case 23:return 72
break;
case 24:return 17
break;
case 25:return 65
break;
case 26:return 48
break;
case 27:return 103
break;
case 28:return 46
break;
case 29:return 41
break;
case 30:console.log("Found INTEIRO");return 25
break;
case 31:return 44
break;
case 32:return 28
break;
case 33:return 45
break;
case 34:return 29
break;
case 35:return 30
break;
case 36:return 93
break;
case 37:return 77
break;
case 38:return 70
break;
case 39:return 74
break;
case 40:return 26
break;
case 41:return 42
break;
case 42:return 57
break;
case 43:return 66
break;
case 44:return 63
break;
case 45:return 15
break;
case 46:return 101
break;
case 47:
                            output_error("BINARIO " + yy_.yytext + "\n");
                            return 38;
                        
break;
case 48:
                            output_error("OCTAL " + yy_.yytext + "\n");
                            return 40;
                        
break;
case 49:
                            output_error("HEXADECIMAL " + yy_.yytext + "\n");
                            return 39;
                        
break;
case 50:
                            output_error("REAL "+ yy_.yytext + "\n");
                            return 99;
                        
break;
case 51:
                            output_error("DECIMAL " + yy_.yytext + "\n");
                            return 37;
                        
break;
case 52: console.log(yy_.yytext); return 13;
break;
case 53:return 89
break;
case 54:return 88
break;
case 55:return 76
break;
case 56:return 75
break;
case 57:return 80
break;
case 58:return '!'
break;
case 59:return 90
break;
case 60:return 95
break;
case 61:return 96
break;
case 62:return 'PI'
break;
case 63:return 5
break;
case 64:
                            stringBuffer = "";
                            this.begin("quotes");
                        
break;
case 65:                        
                            this.popState();
                            return 98;
                        
break;
case 66:stringBuffer+=yy_.yytext;
break;
case 67:stringBuffer+=yy_.yytext.substring(1);
break;
case 68:stringBuffer+="\n";
break;
case 69:stringBuffer+="\b";
break;
case 70:stringBuffer+="\t";
break;
case 71:stringBuffer+="\n";
break;
case 72:stringBuffer+="\f";
break;
case 73:stringBuffer+="0";
break;
case 74:;
break;
case 75:
                            output_error("Unterminated string constant");
                            this.popState();
                        
break;
case 76:
                            output_error("String contains null character");
                            this.popState();
                        
break;
case 77:
                            output_error("EOF in string constant");
                            this.popState();
                        
break;
case 78:stringBuffer ="\n"; return C_CONST; 
break;
case 79:stringBuffer = "\b"; return C_CONST; 
break;
case 80:stringBuffer = "\t"; return C_CONST; 
break;
case 81:stringBuffer = "\n"; return C_CONST; 
break;
case 82:stringBuffer = "\f"; return C_CONST; 
break;
case 83:stringBuffer = yy_.yytext.slice(1,-1); return C_CONST;
break;
case 84:stringBuffer = ""; return C_CONST;
break;
case 85:return 61
break;
case 86:return 87
break;
case 87:return 85
break;
case 88:return 83
break;
case 89:
                            console.log("Símbolo " + yy_.yytext);
                            return yy_.yytext;
                        
break;
case 90:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*)/,/^(?:\*+\/)/,/^(?:[^\n\*]*)/,/^(?:\*+[^\n\/])/,/^(?:\n)/,/^(?:[^\n])/,/^(?:$)/,/^(?:\/\/)/,/^(?:[^\n])/,/^(?:\n)/,/^(?:$)/,/^(?:([aA])([lL])([gG])([oO])([rR])([iI])([tT])([mM])([oO]))/,/^(?:([aA])([tT])([eEéÉ]))/,/^(?:([cC])([aA])([rR])([aA])([cC])([tT])([eE])([rR])([eE])([sS]))/,/^(?:([cC])([aA])([rR])([aA])([cC])([tT])([eE])([rR])([eE]))/,/^(?:([eE])([nN])([qQ])([uU])([aA])([nN])([tT])([oO]))/,/^(?:([dD])([eE]))/,/^(?:([eE])([nN])([tT])([aA])([oO]))/,/^(?:([eE])|&&)/,/^(?:([fF])([aA])([cC])([aA]))/,/^(?:([fF])([aA])([lL])([sS])([oO]))/,/^(?:([fF])([iI])([mM])-([eE])([nN])([qQ])([uU])([aA])([nN])([tT])([oO]))/,/^(?:([fF])([iI])([mM])-([pP])([aA])([rR])([aA]))/,/^(?:([fF])([iI])([mM])-([vV])([aA])([rR])([iI])([aAáÁãÃ])([vV])([eE])([iI])([sS]))/,/^(?:([fF])([iI])([mM])-([sS])([eE]))/,/^(?:([fF])([iI])([mM]))/,/^(?:([fF])([uU])([nN])([cCçÇ])([aAáÁãÃ])([oO]))/,/^(?:([iI])([nN])([iIíÍ])([cC])([iI])([oO]))/,/^(?:([iI])([nN])([tT])([eE])([iI])([rR])([oO])([sS]))/,/^(?:([iI])([nN])([tT])([eE])([iI])([rR])([oO]))/,/^(?:([lL])([iI])([tT])([eE])([rR])([aA])([iI])([sS]))/,/^(?:([lL])([iI])([tT])([eE])([rR])([aA])([lL]))/,/^(?:([lL])([oOóÓ])([gG])([iI])([cC])([oO])([sS]))/,/^(?:([lL])([oOóÓ])([gG])([iI])([cC])([oO]))/,/^(?:([mM])([aA])([tT])([rR])([iI])([zZ]))/,/^(?:([nN])([aAáÁãÃ])([oO]))/,/^(?:([oO])([uU])|\|\|)/,/^(?:([pP])([aA])([rR])([aA]))/,/^(?:([pP])([aA])([sS])([sS])([oO]))/,/^(?:([rR])([eE])([aA])([lL]))/,/^(?:([rR])([eE])([aA])([iI])([sS]))/,/^(?:([rR])([eE])([tT])([oO])([rR])([nN])([eE]))/,/^(?:([sS])([eE])([nN])([aAáÁãÃ])([oO]))/,/^(?:([sS])([eE]))/,/^(?:([vV])([aA])([rR])([iI])([aAáÁãÃ])([vV])([eE])([iI])([sS]))/,/^(?:([vV])([eE])([rR])([dD])([aA])([dD])([eE])([iI])([rR])([oO]))/,/^(?:(0[bB][01]+))/,/^(?:(0[cC][0-8]+))/,/^(?:(0[xX][0-9a-fA-F]+))/,/^(?:([0-9]+\.[0-9]+))/,/^(?:([0-9]+))/,/^(?:([a-zA-Z"_"][a-zA-Z0-9"_"]*))/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:$)/,/^(?:")/,/^(?:")/,/^(?:[^\\\n\0\"]+)/,/^(?:\\[^btnf0\0\n])/,/^(?:\\\n)/,/^(?:\\b)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\f)/,/^(?:\\0)/,/^(?:\\)/,/^(?:\n)/,/^(?:[\0]|\0$)/,/^(?:$)/,/^(?:(['])\\n([']))/,/^(?:(['])\\b([']))/,/^(?:(['])\\t([']))/,/^(?:(['])\\n([']))/,/^(?:(['])\\f([']))/,/^(?:(['])[^\n]([']))/,/^(?:(['])([']))/,/^(?::=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:(\+|-|\*|\/|;|,|<|:|@|\(|\)|~|\{|\}|=|\.|\||\^))/,/^(?:.)/],
conditions: {"MultiLineComment":{"rules":[2,3,4,5,6,7],"inclusive":false},"SingleLineComment":{"rules":[9,10,11],"inclusive":false},"quotes":{"rules":[65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}