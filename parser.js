/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[12,16],$V2=[5,100],$V3=[2,32],$V4=[1,17],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[19,23],$Vb=[2,12],$Vc=[12,47,55,60,62,63,64,66,67,69],$Vd=[2,43],$Ve=[1,40],$Vf=[1,38],$Vg=[1,58],$Vh=[1,59],$Vi=[1,60],$Vj=[1,61],$Vk=[1,43],$Vl=[1,44],$Vm=[1,45],$Vn=[1,46],$Vo=[1,51],$Vp=[1,52],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,87],$Vv=[1,88],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[13,23,35,61,65,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93],$VL=[1,104],$VM=[1,105],$VN=[1,106],$VO=[1,107],$VP=[1,108],$VQ=[1,103],$VR=[1,113],$VS=[23,93],$VT=[12,13,23,45,55,60,64,67,93],$VU=[13,23,31,33,35,59,61,65,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93],$VV=[13,23,35,61,65,68,71,72,73,74,75,76,77,78,85,86,87,93],$VW=[13,23,35,61,65,68,71,72,73,76,77,78,85,86,87,93],$VX=[13,23,35,61,65,68,71,72,73,77,85,86,93],$VY=[13,23,35,61,65,68,71,72,73,93],$VZ=[13,23,35,61,65,68,71,72,73,85,86,93],$V_=[12,45,55,60,64,67],$V$=[13,23,93],$V01=[31,33],$V11=[12,55,60,64,67,69];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"programa":3,"algoritmo":4,"EOF":5,"declaracao_algoritmo":6,"var_decl_block":7,"bloco_declaracao":8,"fun_decl_list":9,"declaracao_funcao":10,"ALGORITMO":11,"IDENTIFICADOR":12,";":13,"VARIAVEIS":14,"var-decl-list":15,"FIM-VARIAVEIS":16,"var_decl":17,"var-list":18,":":19,"tipo_singular":20,"tipo_matriz":21,"tipo_primitivo":22,",":23,"INTEIRO":24,"REAL":25,"CARACTERE":26,"LITERAL":27,"LOGICO":28,"MATRIZ":29,"lista_dimensoes":30,"DE":31,"tipo_primitivo-plural":32,"[":33,"inteiro_literal":34,"]":35,"NUMERO":36,"BINARIO":37,"HEX":38,"OCT":39,"INTEIROS":40,"REAIS":41,"CARACTERES":42,"LITERAIS":43,"LOGICOS":44,"INICIO":45,"lista_declaracao":46,"FIM":47,"declaracao":48,"declaracao_atribuicao":49,"chamada_funcao":50,"declaracao_retorno":51,"declaracao_se":52,"declaracao_enquanto":53,"declaracao_para":54,"RETORNE":55,"expressao":56,"lvalue":57,"lista_indices":58,"ATRIBUI":59,"SE":60,"ENTAO":61,"FIM-SE":62,"SENAO":63,"ENQUANTO":64,"FACA":65,"FIM-ENQUANTO":66,"PARA":67,"ATE":68,"FIM-PARA":69,"passo_mudanca":70,"PASSO":71,"+":72,"-":73,"OU":74,"E":75,"|":76,"^":77,"&":78,"=":79,"DIFERENTE":80,">":81,"MAIORIGUAL":82,"<":83,"MENORIGUAL":84,"/":85,"*":86,"%":87,"termo":88,"~":89,"NAO":90,"literal":91,"(":92,")":93,"argumentos":94,"STR_CONST":95,"NUMERO_R":96,"C_CONST":97,"VERDADEIRO":98,"FALSO":99,"FUNCAO":100,"lista_parametros_opcional":101,"tipo_opcional":102,"declaracao_var_fun":103,"lista_parametros":104,"parametro":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"ALGORITMO",12:"IDENTIFICADOR",13:";",14:"VARIAVEIS",16:"FIM-VARIAVEIS",19:":",23:",",24:"INTEIRO",25:"REAL",26:"CARACTERE",27:"LITERAL",28:"LOGICO",29:"MATRIZ",31:"DE",33:"[",35:"]",36:"NUMERO",37:"BINARIO",38:"HEX",39:"OCT",40:"INTEIROS",41:"REAIS",42:"CARACTERES",43:"LITERAIS",44:"LOGICOS",45:"INICIO",47:"FIM",55:"RETORNE",59:"ATRIBUI",60:"SE",61:"ENTAO",62:"FIM-SE",63:"SENAO",64:"ENQUANTO",65:"FACA",66:"FIM-ENQUANTO",67:"PARA",68:"ATE",69:"FIM-PARA",71:"PASSO",72:"+",73:"-",74:"OU",75:"E",76:"|",77:"^",78:"&",79:"=",80:"DIFERENTE",81:">",82:"MAIORIGUAL",83:"<",84:"MENORIGUAL",85:"/",86:"*",87:"%",89:"~",90:"NAO",92:"(",93:")",95:"STR_CONST",96:"NUMERO_R",97:"C_CONST",98:"VERDADEIRO",99:"FALSO",100:"FUNCAO"},
productions_: [0,[3,2],[4,4],[9,0],[9,2],[6,3],[7,3],[15,2],[15,0],[17,5],[20,1],[20,1],[18,0],[18,3],[22,1],[22,1],[22,1],[22,1],[22,1],[21,4],[30,3],[30,4],[34,1],[34,1],[34,1],[34,1],[32,1],[32,1],[32,1],[32,1],[32,1],[8,3],[46,0],[46,2],[48,1],[48,2],[48,1],[48,1],[48,1],[48,1],[51,2],[51,3],[57,2],[57,1],[58,3],[58,4],[49,4],[52,5],[52,7],[53,5],[54,9],[54,10],[70,2],[70,3],[70,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,2],[56,2],[56,2],[56,2],[56,1],[88,1],[88,1],[88,1],[88,3],[50,4],[50,3],[94,1],[94,3],[91,1],[91,1],[91,1],[91,1],[91,1],[91,1],[10,8],[102,2],[102,0],[101,1],[101,0],[103,2],[103,3],[103,0],[104,1],[104,3],[105,3],[105,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
          return $$[$0-1]; 
break;
case 13:

        console.log("VAR-LIST " + yytext);
    
break;
case 84:

        console.log("String: \'"+ stringBuffer + "\'");
    
break;
}
},
table: [{3:1,4:2,6:3,11:[1,4]},{1:[3]},{5:[1,5]},{7:6,14:[1,7]},{12:[1,8]},{1:[2,1]},{8:9,45:$V0},o($V1,[2,8],{15:11}),{13:[1,12]},o($V2,[2,3],{9:13}),o([12,47,55,60,64,67],$V3,{46:14}),{12:$V4,16:[1,15],17:16},{14:[2,5]},{5:[2,2],10:18,100:[1,19]},{12:$V5,47:[1,20],48:21,49:22,50:23,51:24,52:25,53:26,54:27,55:$V6,57:28,60:$V7,64:$V8,67:$V9},{45:[2,6]},o($V1,[2,7]),o($Va,$Vb,{18:34}),o($V2,[2,4]),{12:[1,35]},o($V2,[2,31]),o($Vc,[2,33]),o($Vc,[2,34]),{13:[1,36]},o($Vc,[2,36]),o($Vc,[2,37]),o($Vc,[2,38]),o($Vc,[2,39]),{59:[1,37]},o([13,23,35,59,61,65,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93],$Vd,{58:39,33:$Ve,92:$Vf}),{12:$V5,13:[1,41],34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:42,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:62,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:63,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:[1,65],57:64},{19:[1,66],23:[1,67]},{92:[1,68]},o($Vc,[2,35]),{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:69,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:72,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,93:[1,71],94:70,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},o([13,23,31,35,59,61,65,68,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93],[2,42],{33:[1,73]}),{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:74,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},o($Vc,[2,40]),{13:[1,75],72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,57:49,88:92,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,57:49,88:93,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,57:49,88:94,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,57:49,88:95,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},o($VK,[2,75]),o($VK,[2,76]),o($VK,[2,77]),o($VK,[2,78]),{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:96,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},o($VK,[2,84]),o($VK,[2,85]),o($VK,[2,86]),o($VK,[2,87]),o($VK,[2,88]),o($VK,[2,89]),o($VK,[2,22]),o($VK,[2,23]),o($VK,[2,24]),o($VK,[2,25]),{61:[1,97],72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ},{65:[1,98],72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ},{31:[1,99]},{31:$Vd,33:$Ve,58:39},{20:100,21:101,22:102,24:$VL,25:$VM,26:$VN,27:$VO,28:$VP,29:$VQ},{12:[1,109]},{12:$VR,93:[2,94],101:110,104:111,105:112},{13:[1,114],72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ},{23:[1,116],93:[1,115]},o($VK,[2,81]),o($VS,[2,82],{72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:117,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{35:[1,118],72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ},o($Vc,[2,41]),{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:119,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:120,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:121,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:122,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:123,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:124,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:125,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:126,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:127,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:128,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:129,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:130,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:131,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:132,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:133,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:134,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},o($VK,[2,71]),o($VK,[2,72]),o($VK,[2,73]),o($VK,[2,74]),{72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ,93:[1,135]},o([12,55,60,62,63,64,67],$V3,{46:136}),o([12,55,60,64,66,67],$V3,{46:137}),{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:138,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{13:[1,139]},{13:[2,10]},{13:[2,11]},{30:140,33:[1,141]},o($VT,[2,14]),o($VT,[2,15]),o($VT,[2,16]),o($VT,[2,17]),o($VT,[2,18]),o($Va,[2,13]),{93:[1,142]},{23:[1,143],93:[2,93]},o($VS,[2,98]),{19:[1,144]},o($Vc,[2,46]),o($VK,[2,80]),{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:145,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{35:[1,146],72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ},o($VU,[2,44]),o($VV,[2,55],{79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG}),o($VV,[2,56],{79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG}),o($VW,[2,57],{74:$Vw,75:$Vx,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG}),o($VX,[2,58],{74:$Vw,75:$Vx,76:$Vy,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,87:$VJ}),o($VW,[2,59],{74:$Vw,75:$Vx,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG}),o($VV,[2,60]),o($VV,[2,61]),o($VV,[2,62]),o($VV,[2,63]),o($VV,[2,64]),o($VV,[2,65]),o($VY,[2,66],{74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o($VY,[2,67],{74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o($VZ,[2,68],{74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,87:$VJ}),o($VZ,[2,69],{74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,87:$VJ}),o($VX,[2,70],{74:$Vw,75:$Vx,76:$Vy,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,87:$VJ}),o($VK,[2,79]),{12:$V5,48:21,49:22,50:23,51:24,52:25,53:26,54:27,55:$V6,57:28,60:$V7,62:[1,147],63:[1,148],64:$V8,67:$V9},{12:$V5,48:21,49:22,50:23,51:24,52:25,53:26,54:27,55:$V6,57:28,60:$V7,64:$V8,66:[1,149],67:$V9},{68:[1,150],72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ},o([12,13,16],[2,9]),{31:[1,151],33:[1,152]},{34:153,36:$Vg,37:$Vh,38:$Vi,39:$Vj},o($V_,[2,92],{102:154,19:[1,155]}),{12:$VR,105:156},{21:158,22:157,24:$VL,25:$VM,26:$VN,27:$VO,28:$VP,29:$VQ},o($VS,[2,83],{72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ}),o($VU,[2,45]),o($Vc,[2,47]),o([12,55,60,62,64,67],$V3,{46:159}),o($Vc,[2,49]),{12:$V5,34:53,36:$Vg,37:$Vh,38:$Vi,39:$Vj,50:48,56:160,57:49,72:$Vk,73:$Vl,88:47,89:$Vm,90:$Vn,91:50,92:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,99:$Vt},{32:161,40:[1,162],41:[1,163],42:[1,164],43:[1,165],44:[1,166]},{34:167,36:$Vg,37:$Vh,38:$Vi,39:$Vj},{35:[1,168]},{12:[1,172],17:170,45:[2,97],48:171,49:22,50:23,51:24,52:25,53:26,54:27,55:$V6,57:28,60:$V7,64:$V8,67:$V9,103:169},{22:173,24:$VL,25:$VM,26:$VN,27:$VO,28:$VP},o($VS,[2,99]),o($VS,[2,100]),o($VS,[2,101]),{12:$V5,48:21,49:22,50:23,51:24,52:25,53:26,54:27,55:$V6,57:28,60:$V7,62:[1,174],64:$V8,67:$V9},{65:[1,175],70:176,71:[1,177],72:$Vu,73:$Vv,74:$Vw,75:$Vx,76:$Vy,77:$Vz,78:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,87:$VJ},o($V$,[2,19]),o($V$,[2,26]),o($V$,[2,27]),o($V$,[2,28]),o($V$,[2,29]),o($V$,[2,30]),{35:[1,178]},o($V01,[2,20]),{8:179,45:$V0},{13:[1,180]},{12:$V4,17:181},o($Va,$Vb,{18:34,58:39,33:$Ve,59:$Vd,92:$Vf}),o($V_,[2,91]),o($Vc,[2,48]),o($V11,$V3,{46:182}),{65:[1,183]},{34:184,36:$Vg,37:$Vh,38:$Vi,39:$Vj,72:[1,185],73:[1,186]},o($V01,[2,21]),o($V2,[2,90]),{45:[2,95]},{13:[1,187]},{12:$V5,48:21,49:22,50:23,51:24,52:25,53:26,54:27,55:$V6,57:28,60:$V7,64:$V8,67:$V9,69:[1,188]},o($V11,$V3,{46:189}),{65:[2,52]},{34:190,36:$Vg,37:$Vh,38:$Vi,39:$Vj},{34:191,36:$Vg,37:$Vh,38:$Vi,39:$Vj},{45:[2,96]},o($Vc,[2,50]),{12:$V5,48:21,49:22,50:23,51:24,52:25,53:26,54:27,55:$V6,57:28,60:$V7,64:$V8,67:$V9,69:[1,192]},{65:[2,53]},{65:[2,54]},o($Vc,[2,51])],
defaultActions: {5:[2,1],12:[2,5],15:[2,6],101:[2,10],102:[2,11],180:[2,95],184:[2,52],187:[2,96],190:[2,53],191:[2,54]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var stringBuffer;

    function output_error(message){
        console.log(message);
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:this.begin("MultiLineComment");
break;
case 2:this.popState();
break;
case 3:;
break;
case 4:;//Deletes most characters
break;
case 5:;
break;
case 6:;//Deletes missing characters if needed
break;
case 7:;// Ignore
break;
case 8:this.begin("SingleLineComment");
break;
case 9:; // Delete
break;
case 10:this.popState();
break;
case 11:this.popState();
break;
case 12:return 11
break;
case 13:return 68
break;
case 14:return 42
break;
case 15:return 26
break;
case 16:return 64
break;
case 17:return 31
break;
case 18:return 61
break;
case 19:return 75
break;
case 20:return 65
break;
case 21:return 99
break;
case 22:return 66
break;
case 23:return 69
break;
case 24:return 16
break;
case 25:return 62
break;
case 26:return 47
break;
case 27:return 100
break;
case 28:return 45
break;
case 29:return 40
break;
case 30:console.log("Found INTEIRO");return 24
break;
case 31:return 43
break;
case 32:return 27
break;
case 33:return 44
break;
case 34:return 28
break;
case 35:return 29
break;
case 36:return 90
break;
case 37:return 74
break;
case 38:return 67
break;
case 39:return 71
break;
case 40:return 25
break;
case 41:return 41
break;
case 42:return 55
break;
case 43:return 63
break;
case 44:return 60
break;
case 45:return 14
break;
case 46:return 98
break;
case 47:
                            output_error("BINARIO " + yy_.yytext + "\n");
                            return 37;
                        
break;
case 48:
                            output_error("OCTAL " + yy_.yytext + "\n");
                            return 39;
                        
break;
case 49:
                            output_error("HEXADECIMAL " + yy_.yytext + "\n");
                            return 38;
                        
break;
case 50:
                            output_error("REAL "+ yy_.yytext + "\n");
                            return 96;
                        
break;
case 51:
                            output_error("DECIMAL " + yy_.yytext + "\n");
                            return 36;
                        
break;
case 52: console.log(yy_.yytext); return 12;
break;
case 53:return 86
break;
case 54:return 85
break;
case 55:return 73
break;
case 56:return 72
break;
case 57:return 77
break;
case 58:return '!'
break;
case 59:return 87
break;
case 60:return 92
break;
case 61:return 93
break;
case 62:return 'PI'
break;
case 63:return 5
break;
case 64:
                            stringBuffer = "";
                            this.begin("quotes");
                        
break;
case 65:                        
                            this.popState();
                            return 95;
                        
break;
case 66:stringBuffer+=yy_.yytext;
break;
case 67:stringBuffer+=yy_.yytext.substring(1);
break;
case 68:stringBuffer+="\n";
break;
case 69:stringBuffer+="\b";
break;
case 70:stringBuffer+="\t";
break;
case 71:stringBuffer+="\n";
break;
case 72:stringBuffer+="\f";
break;
case 73:stringBuffer+="0";
break;
case 74:;
break;
case 75:
                            output_error("Unterminated string constant");
                            this.popState();
                        
break;
case 76:
                            output_error("String contains null character");
                            this.popState();
                        
break;
case 77:
                            output_error("EOF in string constant");
                            this.popState();
                        
break;
case 78:stringBuffer ="\n"; return C_CONST; 
break;
case 79:stringBuffer = "\b"; return C_CONST; 
break;
case 80:stringBuffer = "\t"; return C_CONST; 
break;
case 81:stringBuffer = "\n"; return C_CONST; 
break;
case 82:stringBuffer = "\f"; return C_CONST; 
break;
case 83:stringBuffer = yy_.yytext.slice(1,-1); return C_CONST;
break;
case 84:stringBuffer = ""; return C_CONST;
break;
case 85:console.log("ATRIBUI "+ yy_.yytext); return 59;
break;
case 86:return 84
break;
case 87:return 82
break;
case 88:return 80
break;
case 89:
                            console.log("Símbolo " + yy_.yytext);
                            return yy_.yytext;
                        
break;
case 90:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*)/,/^(?:\*+\/)/,/^(?:[^\n\*]*)/,/^(?:\*+[^\n\/])/,/^(?:\n)/,/^(?:[^\n])/,/^(?:$)/,/^(?:\/\/)/,/^(?:[^\n])/,/^(?:\n)/,/^(?:$)/,/^(?:([aA])([lL])([gG])([oO])([rR])([iI])([tT])([mM])([oO]))/,/^(?:([aA])([tT])([eEéÉ]))/,/^(?:([cC])([aA])([rR])([aA])([cC])([tT])([eE])([rR])([eE])([sS]))/,/^(?:([cC])([aA])([rR])([aA])([cC])([tT])([eE])([rR])([eE]))/,/^(?:([eE])([nN])([qQ])([uU])([aA])([nN])([tT])([oO]))/,/^(?:([dD])([eE]))/,/^(?:([eE])([nN])([tT])([aA])([oO]))/,/^(?:([eE])|&&)/,/^(?:([fF])([aA])([cCçÇ])([aA]))/,/^(?:([fF])([aA])([lL])([sS])([oO]))/,/^(?:([fF])([iI])([mM])-([eE])([nN])([qQ])([uU])([aA])([nN])([tT])([oO]))/,/^(?:([fF])([iI])([mM])-([pP])([aA])([rR])([aA]))/,/^(?:([fF])([iI])([mM])-([vV])([aA])([rR])([iI])([aAáÁãÃ])([vV])([eE])([iI])([sS]))/,/^(?:([fF])([iI])([mM])-([sS])([eE]))/,/^(?:([fF])([iI])([mM]))/,/^(?:([fF])([uU])([nN])([cCçÇ])([aAáÁãÃ])([oO]))/,/^(?:([iI])([nN])([iIíÍ])([cC])([iI])([oO]))/,/^(?:([iI])([nN])([tT])([eE])([iI])([rR])([oO])([sS]))/,/^(?:([iI])([nN])([tT])([eE])([iI])([rR])([oO]))/,/^(?:([lL])([iI])([tT])([eE])([rR])([aA])([iI])([sS]))/,/^(?:([lL])([iI])([tT])([eE])([rR])([aA])([lL]))/,/^(?:([lL])([oOóÓ])([gG])([iI])([cC])([oO])([sS]))/,/^(?:([lL])([oOóÓ])([gG])([iI])([cC])([oO]))/,/^(?:([mM])([aA])([tT])([rR])([iI])([zZ]))/,/^(?:([nN])([aAáÁãÃ])([oO]))/,/^(?:([oO])([uU])|\|\|)/,/^(?:([pP])([aA])([rR])([aA]))/,/^(?:([pP])([aA])([sS])([sS])([oO]))/,/^(?:([rR])([eE])([aA])([lL]))/,/^(?:([rR])([eE])([aA])([iI])([sS]))/,/^(?:([rR])([eE])([tT])([oO])([rR])([nN])([eE]))/,/^(?:([sS])([eE])([nN])([aAáÁãÃ])([oO]))/,/^(?:([sS])([eE]))/,/^(?:([vV])([aA])([rR])([iI])([aAáÁãÃ])([vV])([eE])([iI])([sS]))/,/^(?:([vV])([eE])([rR])([dD])([aA])([dD])([eE])([iI])([rR])([oO]))/,/^(?:(0[bB][01]+))/,/^(?:(0[cC][0-8]+))/,/^(?:(0[xX][0-9a-fA-F]+))/,/^(?:([0-9]+\.[0-9]+))/,/^(?:([0-9]+))/,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:$)/,/^(?:(["]))/,/^(?:")/,/^(?:[^\\\n\0\"]+)/,/^(?:\\[^btnf0\0\n])/,/^(?:\\\n)/,/^(?:\\b)/,/^(?:\\t)/,/^(?:\\n)/,/^(?:\\f)/,/^(?:\\0)/,/^(?:\\)/,/^(?:\n)/,/^(?:[\0]|\0$)/,/^(?:$)/,/^(?:(['])\\n([']))/,/^(?:(['])\\b([']))/,/^(?:(['])\\t([']))/,/^(?:(['])\\n([']))/,/^(?:(['])\\f([']))/,/^(?:(['])[^\n]([']))/,/^(?:(['])([']))/,/^(?::\s*=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<>)/,/^(?:(\+|-|\*|\/|;|,|<|:|@|\(|\)|~|\{|\}|=|\.|\||\^))/,/^(?:.)/],
conditions: {"MultiLineComment":{"rules":[2,3,4,5,6,7],"inclusive":false},"SingleLineComment":{"rules":[9,10,11],"inclusive":false},"quotes":{"rules":[65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}